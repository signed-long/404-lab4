Question 1: What is the link to your github repository for this lab?
    https://github.com/signed-long/404-lab4

Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?
    A django webpage being served from localhost:8000.

Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?
    / : 404 with an error message
    /polls : page sating "Hello, world. You're at the polls index."

Question 4: What is a Django migration and why do we need them?
    It's a database migration that keeps the schema in our database match the schema written in /mysite/polls/models.py.

Question 5: What do you see after you log into the Django adminstration site? From a high levle, how do you get custom models to appear in the Django admin page?
    A table that includes all our database models. You add them to the application's models.py file and then register them in the admin.py file.

Question 6: What do you see when you go to /polls/38/ in your browser? What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number, and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?
    - A page saying "You're looking at question 38."
    - A pages "You're looking at the results of question 38." and "You're voting on question 38.
    - response is 404 
    - In the path parameters change <int:question_id> -> <str:question_id>
    - Change the path() calls to re_path("^([a-zA-Z0-9]*)/votes$") and re_path("^([a-zA-Z0-9]*)/results/$"). 

Question 7: Why is it a bad idea to hardcode urls into the templates?
    - You may want to change the routes in urls.py, this way you wont have to change code in the templates. 

 Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'? When should you use a generic view and when shouldn't you use a generic view?
    - Generic views can encapsulate logic/behaviors that would otherwise be rewritten many times in normal views.
    - When you're doing the same operations and using objects in the same way in multiple views, you wouldn't want to extend a generic view to make your own if the logic you are putting in it is only going to be used once in you application.